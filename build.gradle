buildscript {
  ext.kotlinVersion = '1.2.30'
  repositories {
    jcenter()
    google()
    maven { url 'https://maven.fabric.io/public' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.1'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.diffplug.spotless:spotless-plugin-gradle:3.10.0"

    // fabric swears that this is okay...
    //noinspection GradleDynamicVersion
    classpath 'io.fabric.tools:gradle:1.+'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply from: "$rootDir/gradle/signing.gradle"
apply from: "$rootDir/gradle/spotless.gradle"

repositories {
  jcenter()
  google()
  maven { url 'https://maven.fabric.io/public' }
  maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

def getGitSha() {
  def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def getGitTimestamp() {
  def p = 'git log -n 1 --format=%at'.execute([], rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

android {
  compileSdkVersion 27
  buildToolsVersion '27.0.3'

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'android'
      keyPassword 'android'
    }
    release {
      storeFile file("$keystoreLocation")
      storePassword keystorePassword
      keyAlias storeKeyAlias
      keyPassword aliasKeyPassword
    }
  }

  defaultConfig {
    applicationId 'com.andrewreitz.cash.andrew.mntrailconditions'
    minSdkVersion 21
    targetSdkVersion 27
    multiDexEnabled true

    versionCode 1
    versionName 'ðŸ¥š'

    buildConfigField 'String', 'GIT_SHA', "\"$gitSha\""
    buildConfigField 'long', 'GIT_TIMESTAMP', "$gitTimestamp"
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      signingConfig signingConfigs.debug
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
  }

  flavorDimensions 'environment'

  productFlavors {
    internal {
        dimension 'environment'
        applicationIdSuffix 'internal'
    }
    production {
        dimension 'environment'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE.txt'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    release.java.srcDirs += 'src/release/kotlin'
    internal.java.srcDirs += 'src/internal/kotlin'
    internalDebug.java.srcDirs += 'src/internalDebug/kotlin'
    production.java.srcDirs += 'src/production/kotlin'
    productionDebug.java.srcDirs += 'src/productionDebug/kotlin'
    productionRelease.java.srcDirs += 'src/productionRelease/kotlin'
  }
}

configurations { internalDebugImplementation }

ext {
  supportVersion = '27.1.0'
  stethoVersion = '1.5.0'
  retrofitVersion = '2.2.0'
}

dependencies {
  implementation 'androidx.core:core-ktx:0.2'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

  implementation 'com.android.support.constraint:constraint-layout:1.0.2'
  implementation "com.android.support:support-v4:$supportVersion"
  implementation "com.android.support:support-annotations:$supportVersion"
  implementation "com.android.support:appcompat-v7:$supportVersion"
  implementation "com.android.support:recyclerview-v7:$supportVersion"
  implementation "com.android.support:design:$supportVersion"
  implementation "com.android.support:cardview-v7:$supportVersion"

  implementation 'com.squareup.dagger:dagger:1.2.5'
  kapt 'com.squareup.dagger:dagger-compiler:1.2.5'

  implementation 'com.squareup.okhttp3:okhttp:3.9.1'
  implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
  implementation 'com.squareup.picasso:picasso:2.5.2'
  implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
  implementation 'com.squareup.moshi:moshi-kotlin:1.5.0'
  internalDebugImplementation "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"

  implementation 'com.jakewharton:butterknife:8.8.1'
  kapt 'com.jakewharton:butterknife-compiler:8.8.1'

  implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
  implementation 'com.jakewharton:process-phoenix:2.0.0'
  implementation 'com.jakewharton.timber:timber:4.6.1'
  implementation 'com.jakewharton.byteunits:byteunits:0.9.1'

  internalImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
  productionImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'

  implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'

  internalImplementation 'com.mattprecious.telescope:telescope:2.1.0@aar'

  implementation 'com.f2prateek.rx.preferences2:rx-preferences:2.0.0-RC3'

  implementation 'io.github.kobakei:ratethisapp:1.2.0'

  internalImplementation "com.facebook.stetho:stetho:$stethoVersion"
  internalImplementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
  internalImplementation "com.facebook.stetho:stetho-timber:$stethoVersion@aar"

  implementation 'com.andrewreitz.velcro:velcro-bindablerecycleradapter:2.0.0-SNAPSHOT'

  productionImplementation('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') { transitive = true }

  testImplementation 'org.amshove.kluent:kluent-android:1.35'
}

kapt {
  useBuildCache = true
}

configurations.all { resolutionStrategy { force "com.android.support:support-annotations:$supportVersion" } }

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
  installAll.dependsOn(variant.install)
  // Ensure we end up in the same group as the other install tasks.
  installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName('assemble').dependsOn variant.assemble
}
